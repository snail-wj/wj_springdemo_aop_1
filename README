### 技术分析之Spring框架的核心功能之AOP技术 ###
**AOP的概述**

	1. 什么是AOP的技术？
		* 在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程
		* AOP是一种编程范式，隶属于软工范畴，指导开发者如何组织程序结构
		* AOP最早由AOP联盟的组织提出的,制定了一套规范.Spring将AOP思想引入到框架中,必须遵守AOP联盟的规范
		* 通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术
		* AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型
		* 利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率

	2. AOP:面向切面编程.(思想.---解决OOP遇到一些问题)
	3. AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码（性能监视、事务管理、安全检查、缓存）

	4. 为什么要学习AOP
		* 可以在不修改源代码的前提下，对程序进行增强！！

**Spring框架的AOP的底层实现**

	1. Srping框架的AOP技术底层也是采用的代理技术，代理的方式提供了两种
		1. 基于JDK的动态代理
			* 必须是面向接口的，只有实现了具体接口的类才能生成代理对象

		2. 基于CGLIB动态代理
			* 对于没有实现了接口的类，也可以产生代理，产生这个类的子类的方式

	2. Spring的传统AOP中根据类是否实现接口，来采用不同的代理方式
		1. 如果实现类接口，使用JDK动态代理完成AOP
		2. 如果没有实现接口，采用CGLIB动态代理完成AOP
	对于spring中AOP的实现，这个会自动的执行，如果是这个有接口，则自动执行JDK的动态代理
	如果没有接口，则会采用CGLIB动态代理，这个都是由框架来决定

**JDK的动态代理（代码了解，理解原理）**

	1. 使用Proxy类来生成代理对象的一些代码如下：
		/**
		 * 使用JDK的方式生成代理对象
		 * @author Administrator
		 */
		public class MyProxyUtils {
			public static UserDao getProxy(final UserDao dao) {
				// 使用Proxy类生成代理对象
				UserDao proxy = (UserDao) Proxy.newProxyInstance(dao.getClass().getClassLoader(),
						dao.getClass().getInterfaces(), new InvocationHandler() {

							// 代理对象方法一直线，invoke方法就会执行一次
							public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
								if("save".equals(method.getName())){
									System.out.println("记录日志...");
									// 开启事务
								}
								// 提交事务
								// 让dao类的save或者update方法正常的执行下去
								return method.invoke(dao, args);
							}
						});
				// 返回代理对象
				return proxy;
			}
		}

**CGLIB的代理技术（代码了解）**

	1. 引入CBLIB的开发包
		* 如果想使用CGLIB的技术来生成代理对象，那么需要引入CGLIB的开发的jar包，在Spring框架核心包中已经引入了CGLIB的开发包了。所以直接引入Spring核心开发包即可！

	2. 编写相关的代码
		public static OrderDaoImpl getProxy(){
			// 创建CGLIB核心的类
			Enhancer enhancer = new Enhancer();
			// 设置父类
			enhancer.setSuperclass(OrderDaoImpl.class);
			// 设置回调函数
			enhancer.setCallback(new MethodInterceptor() {
				@Override
				public Object intercept(Object obj, Method method, Object[] args,
						MethodProxy methodProxy) throws Throwable {
					if("save".equals(method.getName())){
						// 记录日志
						System.out.println("记录日志了...");
					}
					return methodProxy.invokeSuper(obj, args);
				}
			});
			// 生成代理对象
			OrderDaoImpl proxy = (OrderDaoImpl) enhancer.create();
			return proxy;
		}


### Spring基于AspectJ的AOP的开发 ###

**技术分析之AOP的相关术语**

	1. Joinpoint(连接点)	-- 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点
	2. Pointcut(切入点)		-- 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义
	3. Advice(通知/增强)	-- 所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)
	4. Introduction(引介)	-- 引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field
	5. Target(目标对象)		-- 代理的目标对象
	6. Weaving(织入)		-- 是指把增强应用到目标对象来创建新的代理对象的过程(例如jdk或是cglib来生成代理对象的过程)
	7. Proxy（代理）		-- 一个类被AOP织入增强后，就产生一个结果代理类
	8. Aspect(切面)			-- 是切入点和通知的结合，以后咱们自己来编写和配置的